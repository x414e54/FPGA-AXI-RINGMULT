library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.fft_stage_pkg.all;

entity tb_bs is
    generic (		
        C_MAX_FFT_LENGTH             : integer   := 64;
        C_MAX_BLUESTEIN_LENGTH       : integer   := 18;	
        C_MAX_FFT_PRIME_WIDTH        : integer   := 64;	
    );
    --port ();
end tb_bs;

architecture behavior of tb_bs is
                        
    signal   stop               : std_logic := '0';
    constant clk_period         : time := 10ns;

    signal clk                  : std_logic := '0';

    --bs       
    signal bs_values          :  stage_io(0 to C_MAX_FFT_PRIMES-1) := (others => (others => '0'));
    signal bs_prime           :  stage_io(0 to C_MAX_FFT_PRIMES-1) := (others => (others => '0'));
    signal bs_prime_red       :  stage_io(0 to C_MAX_FFT_PRIMES-1) := (others => (others => '0'));
    signal bs_prime_len       :  std_logic_vector(16-1 downto 0) := (others => '0');
    signal bs_output         :  stage_io(0 to C_MAX_FFT_PRIMES-1) := (others => (others => '0'));
        
    type bs_array is array(0 to C_MAX_BLUESTEIN_LENGTH - 1) of std_logic_vector(C_MAX_FFT_PRIME_WIDTH-1 downto 0);
    type fft_table_array is array(0 to C_MAX_FFT_LENGTH - 1) of std_logic_vector(C_MAX_FFT_PRIME_WIDTH-1 downto 0);
    type bs_table_array is array(0 to C_MAX_BLUESTEIN_LENGTH - 1) of std_logic_vector(C_MAX_FFT_PRIME_WIDTH-1 downto 0);

    constant INPUT: bs_array := (x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000");
    constant OUTPUT: bs_array := (x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000");
    constant W_TABLE: fft_table_array := (x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000");
    constant WI_TABLE: fft_table_array := (x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000");
    constant MUL_TABLE: bs_table_array := (x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000");
    constant MUL_FFT_TABLE: fft_table_array := (x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000", x"0000000000000000");
    constant PRIME: stage_io := (x"1000000000000D41");
    constant PRIME_RED: stage_io := (x"0FFFFFFFFFFFF2BF");
    constant PRIME_LEN : integer := 61; 
    
begin

    bs_inst : entity work.bluestein_fft
        generic map (
            C_PARAM_WIDTH          => C_PARAM_WIDTH,
            C_PARAM_ADDR_WIDTH     => C_PARAM_ADDR_WIDTH,
            C_PARAM_ADDR_TOP       => C_PARAM_ADDR_TOP + 300,
            C_LENGTH_WIDTH         => C_LENGTH_WIDTH,	
            C_MAX_FFT_PRIME_WIDTH  => C_MAX_FFT_PRIME_WIDTH,
            C_MAX_BLUESTEIN_LENGTH => C_MAX_POLY_LENGTH, 
            C_MAX_FFT_LENGTH       => C_MAX_FFT_LENGTH 
            C_MAX_FFT_LENGTH       => C_MAX_FFT_LENGTH,
            C_MAX_BLUESTEIN_LENGTH => C_MAX_BLUESTEIN_LENGTH,
            C_MAX_FFT_PRIME_WIDTH  => C_MAX_FFT_PRIME_WIDTH,
            C_MAX_FFT_PRIMES       => C_MAX_FFT_PRIMES
        )
        port map (
            clk => clk,
                    
            -- Ports of bluestein_fft
            mode           => bs_mode,
            param          => bs_param,
            param_valid    => bs_param_valid,
            prime          => bs_primes(i),
            prime_r        => bs_primes_r(i),
            prime_s        => bs_prime_len,
            fft_length     => bs_fft_length,
            length         => bs_length,
            values         => bs_values,
            values_valid   => bs_values_valid,
            outputs        => bs_outputs,
            outputs_valid  => bs_outputs_valid
        );  
        
    clk_process : process
    begin
        clk <= '0';
        wait for clk_period/2;
        clk <= '1';
        wait for clk_period/2;
        if stop = '1' then
            wait;
        end if;
    end process;
        
    stimulus : process
    begin
        wait until rising_edge(clk);
                        
        bs_prime_len <= std_logic_vector(to_unsigned(PRIME_LEN, bs_prime_len'length));
        
        for i in 0 to C_MAX_FFT_PRIMES - 1 loop
            param(i) <= PRIMES(i);
            bs_primes_red(i) <= PRIMES_RED(i);
        end loop;        
        for i in 0 to C_MAX_FFT_LENGTH - 1 loop
            param <= W_TABLE(i);
            bs_param_valid = '1';
            wait until rising_edge(clk);
        end loop;
        for i in 0 to C_MAX_FFT_LENGTH - 1 loop
            param <= WI_TABLE(i);
            bs_param_valid = '1';
            wait until rising_edge(clk);
        end loop;
        for i in 0 to C_MAX_FFT_LENGTH - 1 loop
            param <= MUL_FFT_TABLE(i);
            bs_param_valid = '1';
            wait until rising_edge(clk);
        end loop;
                          
        for i in 0 to C_MAX_BLUESTEIN_LENGTH - 1 loop
            param <= MUL_TABLE(i);
        end loop;
        
        wait until rising_edge(clk);
        
        bs_enabled <= '1';
        for i in 0 to C_MAX_BLUESTEIN_LENGTH - 1 loop
        	bs_values(0) <= INPUT(i);
        	wait until rising_edge(clk);
        end loop;
        
        wait until rising_edge(clk);
        wait for 500ns;

		for i in 0 to C_MAX_BLUESTEIN_LENGTH - 1 loop
			assert bs_outputs(0) = OUTPUT(i);
            wait until rising_edge(clk);
		end loop;

        stop <= '1';
        
        wait;
    end process;

end;